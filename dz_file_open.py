# DZ 27
'Памятка: Как работают объекты, передаваемые через *args и доступ к их атрибутам'
# Класс Product представляет товар с его аттрибутами
class Product:
    # Конструктор класса, инициализирует объект с аттрибутами name, weight и category
    def __init__(self, name, weight, category):
        self.name = name  # Атрибут name — название продукта
        self.weight = weight  # Атрибут weight — вес продукта
        self.category = category  # Атрибут category — категория продукта

    # Метод __str__ возвращает строковое представление объекта для удобного вывода
    def __str__(self):
        return f'{self.name}, {self.weight}, {self.category}'  # Возвращает строку вида: 'Potato, 50.5, Vegetables'

    # Метод __repr__ возвращает строку, представляющую объект, также для отладки
    def __repr__(self):
        return f'{self.name}, {self.weight}, {self.category}'  # Строка в том же формате


# Класс Shop представляет магазин, в котором хранятся товары (объекты класса Product)
class Shop:
    __file_name = 'product.txt'  # Имя файла, в котором будут храниться данные о товарах

    # Метод для получения всех продуктов, сохраненных в файле
    def get_products(self):
        file = open(self.__file_name, 'r')  # Открываем файл для чтения ('r' — режим чтения)
        rfile = file.read()  # Читаем все содержимое файла в одну строку
        file.close()  # Закрываем файл после чтения
        return rfile  # Возвращаем строку с данными всех продуктов

    # Метод для добавления новых продуктов в магазин
    def add(self, *other):
        existing_products = self.get_products()  # Получаем строку с существующими продуктами из файла

        # Цикл проходит по всем переданным объектам продуктов
        for i in other:  # *other — это кортеж, содержащий все переданные объекты (например, p1, p2, p3)
            # Пояснение к циклу:
            # Каждый элемент в `other` — это объект, переданный в метод add.
            # На каждой итерации переменная `i` будет ссылаться на текущий объект из кортежа `other`.
            # Например, если *other содержит p1, p2, p3, то `i` по очереди принимает значения p1, затем p2, затем p3.
            # Поскольку элементы `other` — это объекты класса Product (например, p1 или p2),
            # переменная `i` имеет доступ ко всем атрибутам класса Product через точечную нотацию,
            # такие как `i.name`, `i.weight`, и `i.category`.
            # Это позволяет безопасно работать с каждым объектом и его данными внутри цикла.

            # Проверяем, является ли текущий объект экземпляром класса Product
            if isinstance(i, Product):
                # Эта строка проверяет, является ли текущий объект (i) экземпляром класса Product.
                # Это важно, так как метод add может принимать любые объекты (не только Product).
                # Проверка isinstance гарантирует, что объект имеет доступ к атрибутам name, weight, и category.
                # Если объект не принадлежит классу Product, доступ к его атрибутам приведет к ошибке.
                # Таким образом, эта проверка защищает от непредвиденных ошибок в коде.

                # Проверяем, если имя текущего продукта (i.name) уже есть в строках существующих продуктов
                if i.name in existing_products:
                    print(
                        f'Продукт {i.name} уже есть в магазине')  # Если такой продукт уже существует, выводим сообщение
                else:
                    # Если продукт с таким именем ещё не существует, добавляем его в файл
                    file = open(self.__file_name, 'a')  # Открываем файл в режиме добавления ('a')
                    file.write(f'{i.name}, {i.weight}, {i.category}\n')  # Записываем информацию о продукте в файл
                    file.close()  # Закрываем файл
                    print(f'Продукт {i.name} добавлен в магазин')  # Выводим сообщение о добавлении товара
            else:
                # Если объект не является экземпляром Product, выводим предупреждение
                print(f'Объект {i} не является продуктом!')


# Создаем объект магазина
s1 = Shop()

# Создаем несколько объектов продуктов
p1 = Product('Potato', 50.5, 'Vegetables')  # Продукт с названием 'Potato', весом 50.5 и категорией 'Vegetables'
p2 = Product('Spaghetti', 3.4, 'Groceries')  # Продукт с названием 'Spaghetti', весом 3.4 и категорией 'Groceries'
p3 = Product('Potato', 5.5, 'Vegetables')  # Продукт с названием 'Potato', но с другим весом

print(p2)  # Выводим строковое представление объекта p2 с помощью __str__ метода

# Добавляем продукты в магазин
s1.add(p1, p2, p3)

# После добавления выводим все продукты, сохраненные в файле
print(s1.get_products())